package com.example.practice.login.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import lombok.RequiredArgsConstructor;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@RequiredArgsConstructor 
@EnableWebSecurity // 1
@Configuration 
public class SecurityConfig extends WebSecurityConfigurerAdapter{
	  @Override
	    protected void configure(HttpSecurity http) throws Exception{
	        http
	            .authorizeRequests() // 해당 메소드 아래는 각 경로에 따른 권한을 지정할 수 있다.
	                .antMatchers("/" , "/login" , "/logout", "/signUp", "/access_denied", "/signUp/js/**",
							"/resources/**", "/signUpAdd", "/css/**","/js/**" ).permitAll() // antMatchers 경로 파일을 permitAll 로그인 권한은 누구나
	                .anyRequest().authenticated()  //  로그인된 사용자가 요청을 수행할 떄 필요하다  만약 사용자가 인증되지 않았다면, 스프링 시큐리티 필터는 요청을 잡아내고 사용자를 로그인 페이지로 리다이렉션 해준다.
	                .and()
					// 로그인
	            .formLogin() // 하위에 내가 직접 구현한 로그인 폼, 로그인 성공시 이동 경로 설정 가능. , 로그인 폼의 아이디,패스워드는 username, password로 맞춰야 함
	                        .loginPage("/login") // 로그인이 수행될 경로.
	                        .loginProcessingUrl("/loginProcess")// 로그인form의  action과 일치시켜주어야 함.
	                        .defaultSuccessUrl("/loginSuccess/main") // 로그인 성공 시 이동할 경로.
	                        .failureUrl("/access_denied") // 인증 실패 시 보낼 경로
	                .permitAll()
	                .and()
					// 로그아웃
	             .logout()
					.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
					.logoutUrl("/logout")
					// 로그아웃 핸들러 추가
					.logoutSuccessHandler((request, response, authentication) -> {
						response.sendRedirect("/login");
					}) // 로그아웃 성공 핸들러
					.deleteCookies("JSESSIONID","remember-me") // 로그아웃 후 삭제할 쿠키 지정
					.invalidateHttpSession(true)
					.permitAll()
	                 .and()
	             .exceptionHandling()
	                 .accessDeniedPage("/accessDenied_page"); // 권한이 없는 대상이 접속을시도했을 때
	    }

	    @Bean
	    public PasswordEncoder passwordEncoder(){
	        return new BCryptPasswordEncoder();
	    }
}
